// file: scripts/seed.js
const { sequelize, ExamSession, ProctoringEvent } = require('../src/models');

/**
 * This script is for seeding the database with sample data for testing purposes.
 * It connects to the database, creates sample exam sessions and corresponding
 * proctoring events, and then inserts them into their respective tables.
 *
 * To run this script, execute `node scripts/seed.js` from the service's root directory.
 */
const seedDatabase = async () => {
  try {
    // 1. Authenticate and Sync Database
    await sequelize.authenticate();
    console.log('Connection has been established successfully.');

    // Using { alter: true } will check the current state of the table in the database
    // and then perform the necessary changes in the table to make it match the model.
    // This is safer than { force: true } which would drop the tables first.
    await sequelize.sync({ alter: true });
    console.log('All models were synchronized successfully.');

    // 2. Create Sample Exam Sessions
    console.log('Creating sample exam sessions...');
    const sessionsData = [
      {
        // No ID needed, UUID will be generated by default
        userId: 101,
        examId: 'EXAM_CS101',
        startTime: new Date(),
        status: 'in_progress',
        highSeverityViolationCount: 1,
        maxSeverityLevel: 'high',
      },
      {
        userId: 102,
        examId: 'EXAM_MATH202',
        startTime: new Date(Date.now() - 3 * 60 * 60 * 1000), // Started 3 hours ago
        endTime: new Date(Date.now() - 1 * 60 * 60 * 1000), // Ended 1 hour ago
        status: 'completed',
        maxSeverityLevel: 'medium',
        highSeverityViolationCount: 0,
        reviewNotes: 'Student looked away from the screen multiple times.',
        reviewerId: 99,
      },
    ];
    
    // Using `create` individually to get instances back with default values like ID
    const session1 = await ExamSession.create(sessionsData[0]);
    const session2 = await ExamSession.create(sessionsData[1]);

    console.log('2 exam sessions created.');

    // 3. Create Sample Proctoring Events linked to the sessions
    console.log('Creating sample proctoring events...');
    const eventsData = [
      // Events for Session 1
      {
        sessionId: session1.id,
        eventType: 'face_not_detected',
        severity: 'high',
        timestamp: new Date(),
        metadata: { reason: 'User left the room for 30 seconds' },
        isReviewed: false,
      },
      {
        sessionId: session1.id,
        eventType: 'multiple_faces_detected',
        severity: 'medium',
        timestamp: new Date(Date.now() + 5 * 60 * 1000), // 5 mins from now
        metadata: { detected_faces: 2, image_ref: '/path/to/image1.jpg' },
        isReviewed: false,
      },
      // Events for Session 2
      {
        sessionId: session2.id,
        eventType: 'mobile_phone_detected',
        severity: 'low',
        timestamp: new Date(session2.startTime.getTime() + 15 * 60 * 1000), // 15 mins into the exam
        metadata: { confidence: 0.85, image_ref: '/path/to/image2.jpg' },
        isReviewed: true,
      },
      {
        sessionId: session2.id,
        eventType: 'user_looking_away',
        severity: 'medium',
        timestamp: new Date(session2.startTime.getTime() + 30 * 60 * 1000), // 30 mins into the exam
        metadata: { direction: 'left', duration_sec: 10 },
        isReviewed: true,
      },
    ];

    await ProctoringEvent.bulkCreate(eventsData);

    console.log(`${eventsData.length} proctoring events created.`);
    console.log('Database seeding completed successfully!');

  } catch (error) {
    console.error('Unable to seed the database:', error);
  } finally {
    // 4. Close the database connection
    await sequelize.close();
    console.log('Database connection closed.');
  }
};

// Run the seeding function
seedDatabase();
