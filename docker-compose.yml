version: '3.8'

services:
  # 1. Dịch vụ giám sát Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      # Ánh xạ file cấu hình prometheus.yml từ máy host vào container
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservice-net

  # 2. Dịch vụ trực quan hóa Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      # Dùng volume để lưu trữ dữ liệu của Grafana (dashboards, datasources)
      - grafana-data:/var/lib/grafana
    networks:
      - microservice-net

  # 3. Cơ sở dữ liệu
  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - microservice-net

  mongo-db:
    image: mongo:latest
    container_name: mongo-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - microservice-net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservice-net

  # 5. Apache Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      # It is recommended to generate a new Cluster ID with a command like:
      # docker run --rm confluentinc/cp-kafka:latest kafka-storage random-uuid
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://:29092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservice-net

  # 6. Các microservices của ứng dụng
  discovery-service:
    build: ./services/discovery-service
    container_name: discovery-service
    ports:
      - "9999:9999"
    networks:
      - microservice-net

  config-server:
    build: ./services/config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - microservice-net
    depends_on:
      - discovery-service

  api-gateway:
    build: ./services/api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    networks:
      - microservice-net
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_URL}
      - EUREKA_INSTANCE_HOSTNAME=${EUREKA_HOSTNAME}
    depends_on:
      - discovery-service
      - config-server
      - postgres-db
      - mongo-db

  identity-service:
    build: ./services/identity-service
    container_name: identity-service
    ports:
      - "9000:9000"
    networks:
      - microservice-net
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/${DB_NAME_IDENTITY}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_REDIS_HOST=${REDIS_HOST}
      - SPRING_REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - APP_INTER_SERVICE_SECRET=${INTER_SERVICE_SECRET}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_URL}
      - EUREKA_INSTANCE_HOSTNAME=${EUREKA_HOSTNAME}
    depends_on:
      - discovery-service
      - config-server
      - postgres-db
      - mongo-db
      - redis

  file-service:
    build: ./services/file-service
    container_name: file-service
    ports:
      - "9003:9003"
    networks:
      - microservice-net
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/${DB_NAME_IDENTITY}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATA_MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo-db:27017/
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_URL}
      - EUREKA_INSTANCE_HOSTNAME=${EUREKA_HOSTNAME}
    depends_on:
      - discovery-service
      - config-server
      - postgres-db
      - mongo-db
    volumes:
      - ./services/file-service/uploads:/usr/src/app/uploads

  profile-service:
    build: ./services/profile-service
    container_name: profile-service
    ports:
      - "9002:9002"
    networks:
      - microservice-net
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/${DB_NAME_PROFILE}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_URL}
      - EUREKA_INSTANCE_HOSTNAME=${EUREKA_HOSTNAME}
    depends_on:
      - discovery-service
      - config-server
      - postgres-db
      - kafka

  notification-service:
    build: ./services/notification-service
    container_name: notification-service
    ports:
      - "9004:9004"
    networks:
      - microservice-net
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=${EUREKA_URL}
      - EUREKA_INSTANCE_HOSTNAME=${EUREKA_HOSTNAME}
    depends_on:
      - discovery-service
      - config-server
      - kafka

# Khai báo mạng chung cho các container
networks:
  microservice-net:
    driver: bridge

# Khai báo volume để lưu trữ dữ liệu
volumes:
  grafana-data:
  postgres_data:
  mongo_data:
  redis_data:
